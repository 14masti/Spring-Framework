CREATE OR REPLACE FUNCTION GetSlotCountForDoctor(docid integer, weekday integer)
RETURNS integer AS $$
DECLARE
    slot_count integer := 0;
    slot_record RECORD;  -- Declare a record variable outside the loop
BEGIN
    -- Iterate through doctor's available time slots
    FOR slot_record IN
        SELECT
            "doctorid",
            "doctorslotindex",
            "doctoravailablefrom"::time,
            "doctoravailableto"::time,
            "doctoravailableslot",
            "doctorschedule"
        FROM
            doctorschedule_bhaskar
        WHERE
            "doctorid" = docid
    LOOP
        -- Check if the specified weekday is included in the doctor's schedule
        IF position(weekday::text in slot_record.doctorschedule) > 0 THEN
            -- Calculate the slot intervals
            FOR i IN 0..((EXTRACT(EPOCH FROM (slot_record.doctoravailableto - slot_record.doctoravailablefrom)) / 60) / slot_record.doctoravailableslot - 1)::integer
            LOOP
                -- Increment the slot count
                slot_count := slot_count + 1;
            END LOOP;
        END IF;
    END LOOP;
    
    -- Return the slot count
    RETURN slot_count;
END;
$$ LANGUAGE plpgsql;


SELECT GetSlotCountForDoctor(1, 1);





create or Replace function getslotcountperdate(doctor_id integer,slot_date DATE)
returns integer as $$

Declare 
   res integer :=0;
BEGIN
	select count(*) into res  
	from appointmentsslotcalendar 
	where slotdoctorid=doctor_id 
	and slotdate=slot_date;
	
	return res;
END;
$$ LANGUAGE plpgsql;

select * from appointments_venu;

select getslotcountperdate(6,'2023-09-25')



create table doc_availability(docid int primary key,rangeofavail int);
insert into doc_availability(docid,rangeofavail) values(11,45);
select * from doc_availability








CREATE OR REPLACE PROCEDURE CreateAppointmentsForDoctorWithChecks(docid integer, currentdate DATE)
LANGUAGE plpgsql
AS $$
DECLARE
    range_value integer;
    target_date DATE;
BEGIN
    -- Retrieve the range from the doc_availability table based on docid
    SELECT rangeofavail INTO range_value
    FROM doc_availability
    WHERE docid = docid;

    IF range_value IS NULL THEN
        RAISE EXCEPTION 'No range found for docid = %', docid;
        RETURN;
    END IF;

    -- Initialize the target_date with currentdate
    target_date := currentdate;

    -- Iterate through a range of dates from currentdate to currentdate + range_value
    FOR i IN 1..range_value LOOP
        -- Check if the target_date does not exist in the appointmentslotcalendar table
        IF NOT EXISTS (
            SELECT 1
            FROM appointmentsslotcalendar
            WHERE slotdoctorid = docid
            AND slotdate = target_date
        ) THEN
            -- Check if the doctor is available on the target_date using GetSlotCountForDoctor
            IF GetSlotCountForDoctor(docid, EXTRACT(ISODOW FROM target_date)::integer) > 0 THEN
                -- Check if the target_date is within the allowed range using getslotcountperdate
                IF getslotcountperdate(docid, target_date) < 5 THEN
                    -- Insert the record into appointmentslotcalendar with some conditions
                    INSERT INTO appointmentslotcalendar (slotdoctorid, slotdate, slotfrom, slotto, slotstatus)
                    VALUES (
                        docid,
                        target_date,
                        '08:00:00',  -- You can customize the slot start time
                        '09:00:00',  -- You can customize the slot end time
                        'available'
                    );
                END IF;
            END IF;
        END IF;

        -- Increment the target_date for the next iteration
        target_date := target_date + 1;  -- Add one day
    END LOOP;
END;
$$;

select * from appointmentsslotcalendar where slotdoctorid=11;

CREATE OR REPLACE PROCEDURE CreateAppointmentsForDoctorWithChecks(docid integer, currentdate DATE)
LANGUAGE plpgsql
AS $$
DECLARE
    doctor_id 
    range_value integer;
    target_date DATE;
	slot_count integer;

BEGIN
    -- Retrieve the range from the doc_availability table based on docid
    SELECT rangeofavail INTO range_value
    FROM doc_availability
    WHERE docid = docid;

    IF range_value IS NULL THEN
        RAISE EXCEPTION 'No range found for docid = %', docid;
        RETURN;
    END IF;

    -- Initialize the target_date with currentdate
    target_date := currentdate;

    -- Iterate through a range of dates from currentdate to currentdate + range_value
    FOR i IN 1..range_value LOOP
        -- Check if the target_date does not exist in the appointmentslotcalendar table
        IF NOT EXISTS (
            SELECT 1
            FROM appointmentsslotcalendar
            WHERE slotdoctorid = docid
            AND slotdate = target_date
        ) THEN
            -- Check if the doctor is available on the target_date using GetSlotCountForDoctor
            IF GetSlotCountForDoctor(docid, EXTRACT(ISODOW FROM target_date)::integer) > 0 THEN
                -- Get the slot count for the target date using getslotcountperdate
            slot_count := getslotcountperdate(docid, target_date);
            
            -- Insert the record into appointmentslotcalendar for each slot
            FOR j IN 1..slot_count LOOP
                PERFORM create_slots_for_doctor(doc_id, target_date);
				RAISE EXCEPTION 'inserting record for docid = %', docid;

            END LOOP;
            END IF;
        END IF;

        -- Increment the target_date for the next iteration
        target_date := target_date + 1;  -- Add one day
    END LOOP;
END;
$$;


CALL CreateAppointmentsForDoctorWithChecks(123, '2023-09-05');



CREATE OR REPLACE PROCEDURE CreateAppointmentsForDoctorWithChecks(doctor_id integer)
LANGUAGE plpgsql
AS $$
DECLARE
	target_date DATE := current_date;
    range_value integer;
    --target_date DATE;
    slot_count integer;

BEGIN
    -- Retrieve the range from the doc_availability table based on doctor_id
    SELECT rangeofavail INTO range_value
    FROM doc_availability
    WHERE docid = doctor_id;  -- Change 'docid' to 'doctor_id'

    IF range_value IS NULL THEN
        RAISE EXCEPTION 'No range found for doctor_id = %', doctor_id;  -- Change 'docid' to 'doctor_id'
        RETURN;
    END IF;

    -- Initialize the target_date with currentdate
    --target_date := currentdate;

    -- Iterate through a range of dates from currentdate to currentdate + range_value
    FOR i IN 1..range_value LOOP
        -- Check if the target_date does not exist in the appointmentslotcalendar table
        IF NOT EXISTS (
            SELECT 1
            FROM appointmentsslotcalendar
            WHERE slotdoctorid = doctor_id  -- Change 'docid' to 'doctor_id'
            AND slotdate = target_date
        ) THEN
            -- Check if the doctor is available on the target_date using GetSlotCountForDoctor
            IF GetSlotCountForDoctor(doctor_id, EXTRACT(ISODOW FROM target_date)::integer) > 0 THEN
                -- Get the slot count for the target date using getslotcountperdate
                slot_count := getslotcountperdate(doctor_id, target_date);  -- Change 'docid' to 'doctor_id'
            
                -- Insert the record into appointmentslotcalendar for each slot
                FOR j IN 1..slot_count LOOP
                    PERFORM create_slots_for_doctor(doctor_id, target_date);  -- Change 'docid' to 'doctor_id'
                END LOOP;
            END IF;
        END IF;

        -- Increment the target_date for the next iteration
        target_date := target_date + 1;  -- Add one day
    END LOOP;
END;
$$;

DROP PROCEDURE IF EXISTS CreateAppointmentsForDoctorWithChecks(integer, date);

CALL CreateAppointmentsForDoctorWithChecks(1);

select * from appointmentsslotcalendar;



create trigger docsecheduletrigger after insert on
doctorschedule_bhaskar as 


CREATE TRIGGER docsecheduletrigger
AFTER INSERT ON doctorschedule21
FOR EACH ROW
EXECUTE FUNCTION insertfunction(, currentdate DATE)


CREATE TRIGGER InsertTrigger
AFTER INSERT ON doctorschedule_bhaskar
FOR EACH ROW
EXECUTE FUNCTION Insert_Function();

CREATE OR REPLACE FUNCTION Insert_Function() RETURNS Trigger AS $$
BEGIN
    call CreateAppointmentsForDoctorWithChecks(new.doctorid); 
	return new;
END;
$$ LANGUAGE plpgsql;

select * from doctorschedule_bhaskar;
select * from appointmentsslotcalendar;
insert into table doctorsechedule_bhaskar(doctorid,doctorslotindex,doctorschedule,doctoravailablefrom,doctoravailableto,doctoravailableslot) 
values(11,1,135,'09:00:00','12:00:00',30);

INSERT INTO doctorschedule_bhaskar (doctorid, doctorslotindex, doctorschedule, doctoravailablefrom, doctoravailableto, doctoravailableslot)
VALUES (12, 1, 135, '09:00:00', '12:00:00', 30);
select * from doctor;
insert into doctor(doctorid,fullname,specializationid,qualification,experience,designation,photo) 
values(12,'ramu',9,'MD Cardiology',10,'cardiologist','cvbnmc');

create table doc_availability(docid int primary key,rangeofavail int);
insert into doc_availability(docid,rangeofavail) values(12,45);
select * from doc_availability
